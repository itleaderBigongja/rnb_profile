# 프로젝트 내에서 default.conf 파일을 생성한 이유 : Nginx.conf 파일 또한 형상관리를 하기 위해서이다.
# /etc/nginx/sites-enabled/frontend.conf 파일에 해당 내용이 복사된다.
server {
    listen 80;
    listen [::]:80;

    # HTTP -> HTTPS 리다이렉트 (선택 사항, HTTPS 설정 시)
    # # return 301 https://$host$request_uri;

    # React 프론트엔드 정적 파일 서빙
    # React 빌드 시작 경로 및 최상의 root 경로
    root /var/www/frontend;
    index index.html;

    server_name 192.168.1.181 www.192.168.1.181;
    #server_name 192.168.0.25 www.192.168.0.25;

    # React 라우팅을 위한 설정 (새로고침 시 404 방지)
    location / {
        try_files $uri $uri/ =404;
    }


    # Spring Boot API 요청을 Tomcat으로 프록시
    # Spring Boot에서 Tomcat으로 배포를 할 때, profile.war 파일로 압축을 해서 profile/경로 추가
    location /api/ {
        proxy_pass http://localhost:8080/profile/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }


    # 이미지를 public 폴더에 두고 절대 경로로 참조하는 경우
    # 예: /images/my-image.png 요청이 오면 /var/www/your_react_app/images/my-image.png 파일 서벙
    location ~* \.(jpg|jpeg|gif|png|svg|ico)$ {
        # 캐싱 설정
        expires 30d;

        # root /var/www/your_react_app;
        # 기본 root와 동일하다면 명시하지 않아도 됨
        add_header Cache-Control "public, no-transform";
    }


    # 만약 특정 서브 경로에 이미지를 두었다면( 예: /public/static/media )
    # location /static/media/ {
    #   alias /var/www/your_react_app/static/media/; # 실제 파일 경로를 지정
    #   expires 30d;
    #   add_header Cache-Control "public, no-transform";
    # }


    # Nginx WEB 서버에 발생한 모든 ERROR 로그를 frontend_error.log 파일에 저장
    error_log /var/log/nginx/frontend_error.log warn;

    # Nginx WEB 서버에 모든 접근 로그를 frontend_access.log 파일에 저장
    access_log /var/log/nginx/frontend_access.log;
}